go generate
Code generation lands in the toolchain
25 Sep 2014

Kevin Gillette
@kevingillette
https://github.com/xtgo
https://github.com/xtblog/gotalks

* Introduction

- Official toolchain support for code generation in Go 1.4
- Intended for use by package _authors_ only
- Not part of build process -- it's part of the development process

* Running generate

  go generate [-run regexp] [file.go...|packagepath...]

- `go generate` without arguments will scan all Go files in sorted filename order
- generate directives within files will be run one after another, from top to bottom
- Any errors processing any directive will cease all further processing

* Directives

  package library

  //go:generate program -o output.go args...

- Typical usage will involve commands which take an explicit output file argument
- stdio streams aren't redirected -- if applicable, you need some way to specify where output will end up
- generate directive comments must start at the beginning of the line

* Shorthand directives

  package library

  //go:generate -command say echo one two

  //go:generate say three four

- Running generate on the above will produce `one two three four` in the tool output
- Tools designed for use with generate will write files directly, and only output errors
- Shorthand directives will be accessible in the remainder of that file only
- Shorthand directives are not recursive, so the following is fine:

  //go:generate -command echo echo one two

  //go:generate echo three four

* Use cases

- Generic code via code generation: sort.Interface implementations, concrete "container/list" alternatives
- Stuffing binary files in Go string constants
- Inspecting version control repositories and storing revisions in a version.go file
- Converting DSL input into Go

* Further Reading

.link https://blog.golang.org/generate Generate Blog Article
.link http://golang.org/s/go1.4-generate Generate Tool Documentation
